
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000007c8  0000085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  0000086e  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001318  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104d  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061c  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a24  00000000  00000000  00002aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ae  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000728  00000000  00000000  00003bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	uint16 distance = 0;

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
  92:	8f b7       	in	r24, 0x3f	; 63
  94:	80 68       	ori	r24, 0x80	; 128
  96:	8f bf       	out	0x3f, r24	; 63

	/* Initialize the LCD driver */
	LCD_init();
  98:	0e 94 94 02 	call	0x528	; 0x528 <LCD_init>

	/* Initialize the Ultrasonic driver */
	Ultrasonic_init();
  9c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Ultrasonic_init>

	LCD_displayString("Distance=     cm");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_displayString>


	while(1)
	{
		/* Read the distance from the Ultrasonic sensor */
		distance = Ultrasonic_readDistance();
  a8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <Ultrasonic_readDistance>
  ac:	ec 01       	movw	r28, r24
		LCD_moveCursor(0,10);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	6a e0       	ldi	r22, 0x0A	; 10
  b2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_moveCursor>
		if(distance>=100)
  b6:	c4 36       	cpi	r28, 0x64	; 100
  b8:	d1 05       	cpc	r29, r1
  ba:	20 f0       	brcs	.+8      	; 0xc4 <main+0x32>
		{
			/* Display the distance on LCD screen */

			LCD_intgerToString(distance);
  bc:	ce 01       	movw	r24, r28
  be:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_intgerToString>
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <main+0x3e>
		}
		else
		{
			LCD_intgerToString(distance);
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
  ca:	80 e2       	ldi	r24, 0x20	; 32
  cc:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_displayCharacter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e4       	ldi	r24, 0x4F	; 79
  d2:	93 ec       	ldi	r25, 0xC3	; 195
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x48>
  da:	00 00       	nop
  dc:	e5 cf       	rjmp	.-54     	; 0xa8 <main+0x16>

000000de <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  de:	68 30       	cpi	r22, 0x08	; 8
  e0:	08 f0       	brcs	.+2      	; 0xe4 <GPIO_setupPinDirection+0x6>
  e2:	81 c0       	rjmp	.+258    	; 0x1e6 <GPIO_setupPinDirection+0x108>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	08 f0       	brcs	.+2      	; 0xea <GPIO_setupPinDirection+0xc>
  e8:	7e c0       	rjmp	.+252    	; 0x1e6 <GPIO_setupPinDirection+0x108>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	31 f1       	breq	.+76     	; 0x13a <GPIO_setupPinDirection+0x5c>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	38 f0       	brcs	.+14     	; 0x100 <GPIO_setupPinDirection+0x22>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	09 f4       	brne	.+2      	; 0xf8 <GPIO_setupPinDirection+0x1a>
  f6:	3e c0       	rjmp	.+124    	; 0x174 <GPIO_setupPinDirection+0x96>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	09 f0       	breq	.+2      	; 0xfe <GPIO_setupPinDirection+0x20>
  fc:	74 c0       	rjmp	.+232    	; 0x1e6 <GPIO_setupPinDirection+0x108>
  fe:	57 c0       	rjmp	.+174    	; 0x1ae <GPIO_setupPinDirection+0xd0>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	69 f4       	brne	.+26     	; 0x11e <GPIO_setupPinDirection+0x40>
			{
				SET_BIT(DDRA,pin_num);
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	ac 01       	movw	r20, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_setupPinDirection+0x34>
 10e:	44 0f       	add	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_setupPinDirection+0x30>
 116:	ba 01       	movw	r22, r20
 118:	62 2b       	or	r22, r18
 11a:	6a bb       	out	0x1a, r22	; 26
 11c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	ac 01       	movw	r20, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <GPIO_setupPinDirection+0x4e>
 128:	44 0f       	add	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <GPIO_setupPinDirection+0x4a>
 130:	ba 01       	movw	r22, r20
 132:	60 95       	com	r22
 134:	62 23       	and	r22, r18
 136:	6a bb       	out	0x1a, r22	; 26
 138:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	69 f4       	brne	.+26     	; 0x158 <GPIO_setupPinDirection+0x7a>
			{
				SET_BIT(DDRB,pin_num);
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ac 01       	movw	r20, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <GPIO_setupPinDirection+0x6e>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <GPIO_setupPinDirection+0x6a>
 150:	ba 01       	movw	r22, r20
 152:	62 2b       	or	r22, r18
 154:	67 bb       	out	0x17, r22	; 23
 156:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 158:	27 b3       	in	r18, 0x17	; 23
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_setupPinDirection+0x88>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_setupPinDirection+0x84>
 16a:	ba 01       	movw	r22, r20
 16c:	60 95       	com	r22
 16e:	62 23       	and	r22, r18
 170:	67 bb       	out	0x17, r22	; 23
 172:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	69 f4       	brne	.+26     	; 0x192 <GPIO_setupPinDirection+0xb4>
			{
				SET_BIT(DDRC,pin_num);
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	ac 01       	movw	r20, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_setupPinDirection+0xa8>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_setupPinDirection+0xa4>
 18a:	ba 01       	movw	r22, r20
 18c:	62 2b       	or	r22, r18
 18e:	64 bb       	out	0x14, r22	; 20
 190:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 192:	24 b3       	in	r18, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ac 01       	movw	r20, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <GPIO_setupPinDirection+0xc2>
 19c:	44 0f       	add	r20, r20
 19e:	55 1f       	adc	r21, r21
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <GPIO_setupPinDirection+0xbe>
 1a4:	ba 01       	movw	r22, r20
 1a6:	60 95       	com	r22
 1a8:	62 23       	and	r22, r18
 1aa:	64 bb       	out	0x14, r22	; 20
 1ac:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRD,pin_num);
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <GPIO_setupPinDirection+0xe2>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <GPIO_setupPinDirection+0xde>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	61 bb       	out	0x11, r22	; 17
 1ca:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 1cc:	21 b3       	in	r18, 0x11	; 17
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac 01       	movw	r20, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_setupPinDirection+0xfc>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_setupPinDirection+0xf8>
 1de:	ba 01       	movw	r22, r20
 1e0:	60 95       	com	r22
 1e2:	62 23       	and	r22, r18
 1e4:	61 bb       	out	0x11, r22	; 17
 1e6:	08 95       	ret

000001e8 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 1e8:	68 30       	cpi	r22, 0x08	; 8
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <GPIO_writePin+0x6>
 1ec:	81 c0       	rjmp	.+258    	; 0x2f0 <GPIO_writePin+0x108>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <GPIO_writePin+0xc>
 1f2:	7e c0       	rjmp	.+252    	; 0x2f0 <GPIO_writePin+0x108>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	31 f1       	breq	.+76     	; 0x244 <GPIO_writePin+0x5c>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	38 f0       	brcs	.+14     	; 0x20a <GPIO_writePin+0x22>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	09 f4       	brne	.+2      	; 0x202 <GPIO_writePin+0x1a>
 200:	3e c0       	rjmp	.+124    	; 0x27e <GPIO_writePin+0x96>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	09 f0       	breq	.+2      	; 0x208 <GPIO_writePin+0x20>
 206:	74 c0       	rjmp	.+232    	; 0x2f0 <GPIO_writePin+0x108>
 208:	57 c0       	rjmp	.+174    	; 0x2b8 <GPIO_writePin+0xd0>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	69 f4       	brne	.+26     	; 0x228 <GPIO_writePin+0x40>
			{
				SET_BIT(PORTA,pin_num);
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <GPIO_writePin+0x34>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <GPIO_writePin+0x30>
 220:	ba 01       	movw	r22, r20
 222:	62 2b       	or	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_writePin+0x4e>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_writePin+0x4a>
 23a:	ba 01       	movw	r22, r20
 23c:	60 95       	com	r22
 23e:	62 23       	and	r22, r18
 240:	6b bb       	out	0x1b, r22	; 27
 242:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	69 f4       	brne	.+26     	; 0x262 <GPIO_writePin+0x7a>
			{
				SET_BIT(PORTB,pin_num);
 248:	28 b3       	in	r18, 0x18	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <GPIO_writePin+0x6e>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <GPIO_writePin+0x6a>
 25a:	ba 01       	movw	r22, r20
 25c:	62 2b       	or	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <GPIO_writePin+0x88>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <GPIO_writePin+0x84>
 274:	ba 01       	movw	r22, r20
 276:	60 95       	com	r22
 278:	62 23       	and	r22, r18
 27a:	68 bb       	out	0x18, r22	; 24
 27c:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	69 f4       	brne	.+26     	; 0x29c <GPIO_writePin+0xb4>
			{
				SET_BIT(PORTC,pin_num);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <GPIO_writePin+0xa8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <GPIO_writePin+0xa4>
 294:	ba 01       	movw	r22, r20
 296:	62 2b       	or	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <GPIO_writePin+0xc2>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <GPIO_writePin+0xbe>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	65 bb       	out	0x15, r22	; 21
 2b6:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	69 f4       	brne	.+26     	; 0x2d6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTD,pin_num);
 2bc:	22 b3       	in	r18, 0x12	; 18
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ac 01       	movw	r20, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_writePin+0xe2>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_writePin+0xde>
 2ce:	ba 01       	movw	r22, r20
 2d0:	62 2b       	or	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 2d6:	22 b3       	in	r18, 0x12	; 18
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	ac 01       	movw	r20, r24
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_writePin+0xfc>
 2e0:	44 0f       	add	r20, r20
 2e2:	55 1f       	adc	r21, r21
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_writePin+0xf8>
 2e8:	ba 01       	movw	r22, r20
 2ea:	60 95       	com	r22
 2ec:	62 23       	and	r22, r18
 2ee:	62 bb       	out	0x12, r22	; 18
 2f0:	08 95       	ret

000002f2 <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 2f2:	68 30       	cpi	r22, 0x08	; 8
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <GPIO_readPin+0x6>
 2f6:	40 c0       	rjmp	.+128    	; 0x378 <GPIO_readPin+0x86>
 2f8:	84 30       	cpi	r24, 0x04	; 4
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <GPIO_readPin+0xc>
 2fc:	3f c0       	rjmp	.+126    	; 0x37c <GPIO_readPin+0x8a>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	a1 f0       	breq	.+40     	; 0x32a <GPIO_readPin+0x38>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	28 f0       	brcs	.+10     	; 0x310 <GPIO_readPin+0x1e>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	e9 f0       	breq	.+58     	; 0x344 <GPIO_readPin+0x52>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	c9 f5       	brne	.+114    	; 0x380 <GPIO_readPin+0x8e>
 30e:	27 c0       	rjmp	.+78     	; 0x35e <GPIO_readPin+0x6c>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 310:	89 b3       	in	r24, 0x19	; 25
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9c 01       	movw	r18, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <GPIO_readPin+0x2a>
 318:	35 95       	asr	r19
 31a:	27 95       	ror	r18
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <GPIO_readPin+0x26>
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	20 fd       	sbrc	r18, 0
 324:	2e c0       	rjmp	.+92     	; 0x382 <GPIO_readPin+0x90>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 32a:	86 b3       	in	r24, 0x16	; 22
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	9c 01       	movw	r18, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <GPIO_readPin+0x44>
 332:	35 95       	asr	r19
 334:	27 95       	ror	r18
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <GPIO_readPin+0x40>
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	20 fd       	sbrc	r18, 0
 33e:	21 c0       	rjmp	.+66     	; 0x382 <GPIO_readPin+0x90>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 344:	83 b3       	in	r24, 0x13	; 19
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9c 01       	movw	r18, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <GPIO_readPin+0x5e>
 34c:	35 95       	asr	r19
 34e:	27 95       	ror	r18
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <GPIO_readPin+0x5a>
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	20 fd       	sbrc	r18, 0
 358:	14 c0       	rjmp	.+40     	; 0x382 <GPIO_readPin+0x90>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 35e:	80 b3       	in	r24, 0x10	; 16
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9c 01       	movw	r18, r24
 364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_readPin+0x78>
 366:	35 95       	asr	r19
 368:	27 95       	ror	r18
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_readPin+0x74>
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	20 fd       	sbrc	r18, 0
 372:	07 c0       	rjmp	.+14     	; 0x382 <GPIO_readPin+0x90>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
 382:	08 95       	ret

00000384 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	80 f4       	brcc	.+32     	; 0x3a8 <GPIO_setupPortDirection+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	49 f0       	breq	.+18     	; 0x39e <GPIO_setupPortDirection+0x1a>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	28 f0       	brcs	.+10     	; 0x39a <GPIO_setupPortDirection+0x16>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	39 f0       	breq	.+14     	; 0x3a2 <GPIO_setupPortDirection+0x1e>
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	41 f4       	brne	.+16     	; 0x3a8 <GPIO_setupPortDirection+0x24>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <GPIO_setupPortDirection+0x22>
		{
		case PORTA_ID:
			DDRA = direction;
 39a:	6a bb       	out	0x1a, r22	; 26
			break;
 39c:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
 39e:	67 bb       	out	0x17, r22	; 23
			break;
 3a0:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
 3a2:	64 bb       	out	0x14, r22	; 20
			break;
 3a4:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
 3a6:	61 bb       	out	0x11, r22	; 17
 3a8:	08 95       	ret

000003aa <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 3aa:	84 30       	cpi	r24, 0x04	; 4
 3ac:	80 f4       	brcc	.+32     	; 0x3ce <GPIO_writePort+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	49 f0       	breq	.+18     	; 0x3c4 <GPIO_writePort+0x1a>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	28 f0       	brcs	.+10     	; 0x3c0 <GPIO_writePort+0x16>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <GPIO_writePort+0x1e>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	41 f4       	brne	.+16     	; 0x3ce <GPIO_writePort+0x24>
 3be:	06 c0       	rjmp	.+12     	; 0x3cc <GPIO_writePort+0x22>
		{
		case PORTA_ID:
			PORTA = value;
 3c0:	6b bb       	out	0x1b, r22	; 27
			break;
 3c2:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
 3c4:	68 bb       	out	0x18, r22	; 24
			break;
 3c6:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
 3c8:	65 bb       	out	0x15, r22	; 21
			break;
 3ca:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
 3cc:	62 bb       	out	0x12, r22	; 18
 3ce:	08 95       	ret

000003d0 <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	88 f4       	brcc	.+34     	; 0x3f6 <GPIO_readPort+0x26>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	49 f0       	breq	.+18     	; 0x3ea <GPIO_readPort+0x1a>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	28 f0       	brcs	.+10     	; 0x3e6 <GPIO_readPort+0x16>
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	39 f0       	breq	.+14     	; 0x3ee <GPIO_readPort+0x1e>
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	59 f4       	brne	.+22     	; 0x3fa <GPIO_readPort+0x2a>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <GPIO_readPort+0x22>
		{
		case PORTA_ID:
			value = PINA;
 3e6:	89 b3       	in	r24, 0x19	; 25
			break;
 3e8:	08 95       	ret
		case PORTB_ID:
			value = PINB;
 3ea:	86 b3       	in	r24, 0x16	; 22
			break;
 3ec:	08 95       	ret
		case PORTC_ID:
			value = PINC;
 3ee:	83 b3       	in	r24, 0x13	; 19
			break;
 3f0:	08 95       	ret
		case PORTD_ID:
			value = PIND;
 3f2:	80 b3       	in	r24, 0x10	; 16
			break;
 3f4:	08 95       	ret
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
	uint8 value = LOGIC_LOW;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
 3fc:	08 95       	ret

000003fe <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	4f 93       	push	r20
 40e:	5f 93       	push	r21
 410:	6f 93       	push	r22
 412:	7f 93       	push	r23
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	af 93       	push	r26
 41a:	bf 93       	push	r27
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
 420:	e0 91 72 00 	lds	r30, 0x0072
 424:	f0 91 73 00 	lds	r31, 0x0073
 428:	30 97       	sbiw	r30, 0x00	; 0
 42a:	09 f0       	breq	.+2      	; 0x42e <__vector_6+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 42c:	09 95       	icall
	}
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0f be       	out	0x3f, r0	; 63
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
 450:	fc 01       	movw	r30, r24
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
 452:	8e 98       	cbi	0x11, 6	; 17

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
 454:	8c e0       	ldi	r24, 0x0C	; 12
 456:	8f bd       	out	0x2f, r24	; 47

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
 458:	8e b5       	in	r24, 0x2e	; 46
 45a:	88 7f       	andi	r24, 0xF8	; 248
 45c:	90 81       	ld	r25, Z
 45e:	89 2b       	or	r24, r25
 460:	8e bd       	out	0x2e, r24	; 46
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
 462:	8e b5       	in	r24, 0x2e	; 46
 464:	91 81       	ldd	r25, Z+1	; 0x01
 466:	92 95       	swap	r25
 468:	99 0f       	add	r25, r25
 46a:	99 0f       	add	r25, r25
 46c:	90 7c       	andi	r25, 0xC0	; 192
 46e:	8f 7b       	andi	r24, 0xBF	; 191
 470:	89 2b       	or	r24, r25
 472:	8e bd       	out	0x2e, r24	; 46

	/* Initial Value for Timer1 */
	TCNT1 = 0;
 474:	1d bc       	out	0x2d, r1	; 45
 476:	1c bc       	out	0x2c, r1	; 44

	/* Initial Value for the input capture register */
	ICR1 = 0;
 478:	17 bc       	out	0x27, r1	; 39
 47a:	16 bc       	out	0x26, r1	; 38

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
 47c:	89 b7       	in	r24, 0x39	; 57
 47e:	80 62       	ori	r24, 0x20	; 32
 480:	89 bf       	out	0x39, r24	; 57
}
 482:	08 95       	ret

00000484 <Icu_setCallBack>:
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
 484:	90 93 73 00 	sts	0x0073, r25
 488:	80 93 72 00 	sts	0x0072, r24
}
 48c:	08 95       	ret

0000048e <Icu_setEdgeDetectionType>:
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
 48e:	9e b5       	in	r25, 0x2e	; 46
 490:	82 95       	swap	r24
 492:	88 0f       	add	r24, r24
 494:	88 0f       	add	r24, r24
 496:	80 7c       	andi	r24, 0xC0	; 192
 498:	9f 7b       	andi	r25, 0xBF	; 191
 49a:	98 2b       	or	r25, r24
 49c:	9e bd       	out	0x2e, r25	; 46
}
 49e:	08 95       	ret

000004a0 <Icu_getInputCaptureValue>:
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
	return ICR1;
 4a0:	86 b5       	in	r24, 0x26	; 38
 4a2:	97 b5       	in	r25, 0x27	; 39
}
 4a4:	08 95       	ret

000004a6 <Icu_clearTimerValue>:
/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
	TCNT1 = 0;
 4a6:	1d bc       	out	0x2d, r1	; 45
 4a8:	1c bc       	out	0x2c, r1	; 44
}
 4aa:	08 95       	ret

000004ac <Icu_DeInit>:
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
 4ac:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 4ae:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = 0;
 4b0:	1d bc       	out	0x2d, r1	; 45
 4b2:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 0;
 4b4:	17 bc       	out	0x27, r1	; 39
 4b6:	16 bc       	out	0x26, r1	; 38

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
 4b8:	89 b7       	in	r24, 0x39	; 57
 4ba:	8f 7d       	andi	r24, 0xDF	; 223
 4bc:	89 bf       	out	0x39, r24	; 57
}
 4be:	08 95       	ret

000004c0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
 4c0:	cf 93       	push	r28
 4c2:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
 4d8:	89 ef       	ldi	r24, 0xF9	; 249
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <LCD_sendCommand+0x1c>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <LCD_sendCommand+0x22>
 4e2:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
 4ee:	89 ef       	ldi	r24, 0xF9	; 249
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <LCD_sendCommand+0x32>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <LCD_sendCommand+0x38>
 4f8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	6c 2f       	mov	r22, r28
 4fe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <GPIO_writePort>
 502:	89 ef       	ldi	r24, 0xF9	; 249
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_sendCommand+0x46>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_sendCommand+0x4c>
 50c:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
 518:	89 ef       	ldi	r24, 0xF9	; 249
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_sendCommand+0x5c>
 520:	00 c0       	rjmp	.+0      	; 0x522 <LCD_sendCommand+0x62>
 522:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	6f ef       	ldi	r22, 0xFF	; 255
 54a:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 54e:	88 e3       	ldi	r24, 0x38	; 56
 550:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_sendCommand>
}
 560:	08 95       	ret

00000562 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
 562:	cf 93       	push	r28
 564:	c8 2f       	mov	r28, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
 57a:	89 ef       	ldi	r24, 0xF9	; 249
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCD_displayCharacter+0x1c>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_displayCharacter+0x22>
 584:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
 590:	89 ef       	ldi	r24, 0xF9	; 249
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCD_displayCharacter+0x32>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_displayCharacter+0x38>
 59a:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	6c 2f       	mov	r22, r28
 5a0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <GPIO_writePort>
 5a4:	89 ef       	ldi	r24, 0xF9	; 249
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_displayCharacter+0x46>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_displayCharacter+0x4c>
 5ae:	00 00       	nop
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	62 e0       	ldi	r22, 0x02	; 2
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
 5ba:	89 ef       	ldi	r24, 0xF9	; 249
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <LCD_displayCharacter+0x5c>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <LCD_displayCharacter+0x62>
 5c4:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	8c 01       	movw	r16, r24
	uint8 i = 0;
	while(Str[i] != '\0')
 5d2:	fc 01       	movw	r30, r24
 5d4:	80 81       	ld	r24, Z
 5d6:	88 23       	and	r24, r24
 5d8:	51 f0       	breq	.+20     	; 0x5ee <LCD_displayString+0x24>
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
 5da:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
 5dc:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_displayCharacter>
		i++;
 5e0:	cf 5f       	subi	r28, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 5e2:	f8 01       	movw	r30, r16
 5e4:	ec 0f       	add	r30, r28
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 81       	ld	r24, Z
 5ea:	88 23       	and	r24, r24
 5ec:	b9 f7       	brne	.-18     	; 0x5dc <LCD_displayString+0x12>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	39 f0       	breq	.+14     	; 0x608 <LCD_moveCursor+0x12>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	70 f0       	brcs	.+28     	; 0x61a <LCD_moveCursor+0x24>
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	31 f0       	breq	.+12     	; 0x60e <LCD_moveCursor+0x18>
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	59 f4       	brne	.+22     	; 0x61c <LCD_moveCursor+0x26>
 606:	06 c0       	rjmp	.+12     	; 0x614 <LCD_moveCursor+0x1e>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
 608:	96 2f       	mov	r25, r22
 60a:	90 5c       	subi	r25, 0xC0	; 192
				break;
 60c:	07 c0       	rjmp	.+14     	; 0x61c <LCD_moveCursor+0x26>
		case 2:
			lcd_memory_address=col+0x10;
 60e:	96 2f       	mov	r25, r22
 610:	90 5f       	subi	r25, 0xF0	; 240
				break;
 612:	04 c0       	rjmp	.+8      	; 0x61c <LCD_moveCursor+0x26>
		case 3:
			lcd_memory_address=col+0x50;
 614:	96 2f       	mov	r25, r22
 616:	90 5b       	subi	r25, 0xB0	; 176
				break;
 618:	01 c0       	rjmp	.+2      	; 0x61c <LCD_moveCursor+0x26>
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
	{
		case 0:
			lcd_memory_address=col;
 61a:	96 2f       	mov	r25, r22
		case 3:
			lcd_memory_address=col+0x50;
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 61c:	89 2f       	mov	r24, r25
 61e:	80 68       	ori	r24, 0x80	; 128
 620:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_sendCommand>
}
 624:	08 95       	ret

00000626 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	ea 01       	movw	r28, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
 62c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
 630:	ce 01       	movw	r24, r28
 632:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_displayString>
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	60 97       	sbiw	r28, 0x10	; 16
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 650:	be 01       	movw	r22, r28
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	4a e0       	ldi	r20, 0x0A	; 10
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	0e 94 b1 03 	call	0x762	; 0x762 <itoa>
   LCD_displayString(buff); /* Display the string */
 65e:	ce 01       	movw	r24, r28
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_displayString>
}
 666:	60 96       	adiw	r28, 0x10	; 16
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_sendCommand>
}
 67e:	08 95       	ret

00000680 <Ultrasonic_edgeProcessing>:
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
	g_edgeCount++;
 680:	80 91 74 00 	lds	r24, 0x0074
 684:	8f 5f       	subi	r24, 0xFF	; 255
 686:	80 93 74 00 	sts	0x0074, r24
	if(g_edgeCount == 1)
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	31 f4       	brne	.+12     	; 0x69a <Ultrasonic_edgeProcessing+0x1a>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
 68e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Icu_clearTimerValue>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 47 02 	call	0x48e	; 0x48e <Icu_setEdgeDetectionType>
 698:	08 95       	ret
	}
	else if(g_edgeCount == 2)
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	49 f4       	brne	.+18     	; 0x6b0 <Ultrasonic_edgeProcessing+0x30>
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
 69e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Icu_getInputCaptureValue>
 6a2:	90 93 76 00 	sts	0x0076, r25
 6a6:	80 93 75 00 	sts	0x0075, r24
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 47 02 	call	0x48e	; 0x48e <Icu_setEdgeDetectionType>
 6b0:	08 95       	ret

000006b2 <Ultrasonic_init>:
 * Initialize the Ultrasonic driver by:
 * 1. Initialize the Trigger pin direction
 * 2. Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <Ultrasonic_init+0x6>
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	89 83       	std	Y+1, r24	; 0x01
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	8a 83       	std	Y+2, r24	; 0x02

	/* Configure the Trigger pin as output */
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,PIN_OUTPUT);
 6c4:	65 e0       	ldi	r22, 0x05	; 5
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_setupPinDirection>

	/* Initialize the ICU Driver */
	Icu_init(&Icu_Config);
 6cc:	ce 01       	movw	r24, r28
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	0e 94 28 02 	call	0x450	; 0x450 <Icu_init>

	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
 6d4:	80 e4       	ldi	r24, 0x40	; 64
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	0e 94 42 02 	call	0x484	; 0x484 <Icu_setCallBack>
}
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <Ultrasonic_readDistance>:
 * 5. Calculate the distance in Centimeter value.
 */
uint16 Ultrasonic_readDistance(void)
{
	/* Clear all variables as they may have values from previous read operation */
	g_distance = 0;
 6e6:	10 92 77 00 	sts	0x0077, r1
	g_edgeCount = 0;
 6ea:	10 92 74 00 	sts	0x0074, r1
	g_timeHigh = 0;
 6ee:	10 92 76 00 	sts	0x0076, r1
 6f2:	10 92 75 00 	sts	0x0075, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	Icu_clearTimerValue();
 6f6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Icu_clearTimerValue>
 * Function send trigger pulse for Ultrasonic sensor to start measurements
 */
static void Ultrasonic_Trigger(void)
{
	/* Send the Trigger pulse */
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_HIGH);
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	65 e0       	ldi	r22, 0x05	; 5
 6fe:	41 e0       	ldi	r20, 0x01	; 1
 700:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	8a 95       	dec	r24
 708:	f1 f7       	brne	.-4      	; 0x706 <Ultrasonic_readDistance+0x20>
 70a:	00 00       	nop
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_LOW);
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	65 e0       	ldi	r22, 0x05	; 5
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GPIO_writePin>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
 716:	80 91 74 00 	lds	r24, 0x0074
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	69 f4       	brne	.+26     	; 0x738 <Ultrasonic_readDistance+0x52>

	/* Calculate the distance in Centimeter value */
	g_distance = g_timeHigh / 58;
 71e:	80 91 75 00 	lds	r24, 0x0075
 722:	90 91 76 00 	lds	r25, 0x0076
 726:	6a e3       	ldi	r22, 0x3A	; 58
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodhi4>
 72e:	86 2f       	mov	r24, r22
 730:	60 93 77 00 	sts	0x0077, r22

	return g_distance;
}
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	08 95       	ret
 738:	ff cf       	rjmp	.-2      	; 0x738 <Ultrasonic_readDistance+0x52>

0000073a <__udivmodhi4>:
 73a:	aa 1b       	sub	r26, r26
 73c:	bb 1b       	sub	r27, r27
 73e:	51 e1       	ldi	r21, 0x11	; 17
 740:	07 c0       	rjmp	.+14     	; 0x750 <__udivmodhi4_ep>

00000742 <__udivmodhi4_loop>:
 742:	aa 1f       	adc	r26, r26
 744:	bb 1f       	adc	r27, r27
 746:	a6 17       	cp	r26, r22
 748:	b7 07       	cpc	r27, r23
 74a:	10 f0       	brcs	.+4      	; 0x750 <__udivmodhi4_ep>
 74c:	a6 1b       	sub	r26, r22
 74e:	b7 0b       	sbc	r27, r23

00000750 <__udivmodhi4_ep>:
 750:	88 1f       	adc	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	5a 95       	dec	r21
 756:	a9 f7       	brne	.-22     	; 0x742 <__udivmodhi4_loop>
 758:	80 95       	com	r24
 75a:	90 95       	com	r25
 75c:	bc 01       	movw	r22, r24
 75e:	cd 01       	movw	r24, r26
 760:	08 95       	ret

00000762 <itoa>:
 762:	fb 01       	movw	r30, r22
 764:	9f 01       	movw	r18, r30
 766:	e8 94       	clt
 768:	42 30       	cpi	r20, 0x02	; 2
 76a:	c4 f0       	brlt	.+48     	; 0x79c <itoa+0x3a>
 76c:	45 32       	cpi	r20, 0x25	; 37
 76e:	b4 f4       	brge	.+44     	; 0x79c <itoa+0x3a>
 770:	4a 30       	cpi	r20, 0x0A	; 10
 772:	29 f4       	brne	.+10     	; 0x77e <itoa+0x1c>
 774:	97 fb       	bst	r25, 7
 776:	1e f4       	brtc	.+6      	; 0x77e <itoa+0x1c>
 778:	90 95       	com	r25
 77a:	81 95       	neg	r24
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	64 2f       	mov	r22, r20
 780:	77 27       	eor	r23, r23
 782:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodhi4>
 786:	80 5d       	subi	r24, 0xD0	; 208
 788:	8a 33       	cpi	r24, 0x3A	; 58
 78a:	0c f0       	brlt	.+2      	; 0x78e <itoa+0x2c>
 78c:	89 5d       	subi	r24, 0xD9	; 217
 78e:	81 93       	st	Z+, r24
 790:	cb 01       	movw	r24, r22
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	a1 f7       	brne	.-24     	; 0x77e <itoa+0x1c>
 796:	16 f4       	brtc	.+4      	; 0x79c <itoa+0x3a>
 798:	5d e2       	ldi	r21, 0x2D	; 45
 79a:	51 93       	st	Z+, r21
 79c:	10 82       	st	Z, r1
 79e:	c9 01       	movw	r24, r18
 7a0:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <strrev>

000007a4 <strrev>:
 7a4:	dc 01       	movw	r26, r24
 7a6:	fc 01       	movw	r30, r24
 7a8:	67 2f       	mov	r22, r23
 7aa:	71 91       	ld	r23, Z+
 7ac:	77 23       	and	r23, r23
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <strrev+0x4>
 7b0:	32 97       	sbiw	r30, 0x02	; 2
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <strrev+0x18>
 7b4:	7c 91       	ld	r23, X
 7b6:	6d 93       	st	X+, r22
 7b8:	70 83       	st	Z, r23
 7ba:	62 91       	ld	r22, -Z
 7bc:	ae 17       	cp	r26, r30
 7be:	bf 07       	cpc	r27, r31
 7c0:	c8 f3       	brcs	.-14     	; 0x7b4 <strrev+0x10>
 7c2:	08 95       	ret

000007c4 <_exit>:
 7c4:	f8 94       	cli

000007c6 <__stop_program>:
 7c6:	ff cf       	rjmp	.-2      	; 0x7c6 <__stop_program>
